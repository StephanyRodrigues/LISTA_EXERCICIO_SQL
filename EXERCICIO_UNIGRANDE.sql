-- ATIVIDADE  1 ---
SELECT a.nom_alu, a.DAT_NASC, a.MGP, a.DAT_NASC
FROM alunos as a 
WHERE a.COD_CURSO = 26
ORDER BY mgp DESC;

-- ATIVIDADE 2 ---
SELECT 
    c.COD_CURSO AS codigo_curso, 
    c.NOM_CURSO AS nome_curso, 
    p.NOM_PROF AS nome_coordenador
FROM 
    CURSOS AS c
JOIN 
    PROFESSORES AS p ON c.IDT_PROF = p.IDT_PROF
ORDER BY 
    c.COD_CURSO ASC;

-- ATIVIDADE 3 ---
INSERT INTO PROFESSORES (IDT_PROF, MAT_PROF, NOM_PROF)
VALUES ('2020', '202403', 'Fernando Moraes');

-- ATIVIDADE 4 --*
SELECT 
    *
FROM 
    PERIODOS_LETIVOS AS p
WHERE 
    NOT EXISTS (SELECT 1 FROM HISTORICOS AS h WHERE h.ANO = p.ANO AND h.SEMESTRE = p.SEMESTRE)
    AND NOT EXISTS (SELECT 1 FROM MATRICULAS AS m WHERE m.ANO = p.ANO AND m.SEMESTRE = p.SEMESTRE)
    AND NOT EXISTS (SELECT 1 FROM TURMAS AS t WHERE t.ANO = p.ANO AND t.SEMESTRE = p.SEMESTRE);
    
-- ATIVIDADE 5 ---

DELETE FROM PERIODOS_LETIVOS
WHERE 
    NOT EXISTS (SELECT 1 FROM HISTORICOS AS h WHERE h.ANO = PERIODOS_LETIVOS.ANO AND h.SEMESTRE = PERIODOS_LETIVOS.SEMESTRE)
    AND NOT EXISTS (SELECT 1 FROM MATRICULAS AS m WHERE m.ANO = PERIODOS_LETIVOS.ANO AND m.SEMESTRE = PERIODOS_LETIVOS.SEMESTRE)
    AND NOT EXISTS (SELECT 1 FROM TURMAS AS t WHERE t.ANO = PERIODOS_LETIVOS.ANO AND t.SEMESTRE = PERIODOS_LETIVOS.SEMESTRE)
    AND PERIODOS_LETIVOS.ANO = 2011;
    
-- ATIVIDADE 6 ---
SELECT  
    c.COD_CURSO AS codigo_curso, 
    c.NOM_CURSO AS nome_curso, 
    MAX(a.MGP) AS maxima_mgp
FROM 
    CURSOS AS c
JOIN 
    ALUNOS AS a ON c.COD_CURSO = a.COD_CURSO
GROUP BY 
    c.COD_CURSO, 
    c.NOM_CURSO;

-- ATIVIDADE 7 --- 
SELECT 
    c.COD_CURSO AS codigo_curso, 
    c.NOM_CURSO AS nome_curso, 
    COUNT(a.MAT_ALU) AS quantidade_alunos
FROM 
    CURSOS AS c
LEFT JOIN 
    ALUNOS AS a ON c.COD_CURSO = a.COD_CURSO
GROUP BY 
    c.COD_CURSO, 
    c.NOM_CURSO;
    
-- ATIVIDADE ---
SELECT 
    d.COD_DISC AS codigo_disciplina, 
    d.NOM_DISC AS nome_disciplina
FROM 
    HISTORICOS AS h
JOIN 
    DISCIPLINAS AS d ON h.COD_DISC = d.COD_DISC
WHERE 
    h.SITUACAO = 'Reprovado'
GROUP BY 
    d.COD_DISC, 
    d.NOM_DISC
HAVING 
    COUNT(CASE WHEN h.SITUACAO = 'Reprovado' THEN 1 END) > COUNT(*) / 2;
    
    -- ATIVIDADE 9
    SELECT 
    m.PERIODO AS periodo_curricular, 
    d.COD_DISC AS codigo_disciplina, 
    d.NOM_DISC AS nome_disciplina
FROM 
    MATRIZES AS m
JOIN 
    DISCIPLINAS AS d ON m.COD_DISC = d.COD_DISC
WHERE 
    m.COD_CURSO = 4
ORDER BY 
    m.PERIODO, 
    d.NOM_DISC;

-- ATIVIDADE 10
SELECT 
    COUNT(*) AS total_turmas_sem_professor
FROM 
    TURMAS
WHERE 
    IDT_PROF IS NULL 
    AND ANO = 1999;
    
-- ATIVIDADE 11
SELECT 
    d.COD_DISC AS codigo_disciplina, 
    d.NOM_DISC AS nome_disciplina
FROM 
    MATRIZES AS m
JOIN 
    DISCIPLINAS AS d ON m.COD_DISC = d.COD_DISC
GROUP BY 
    d.COD_DISC, 
    d.NOM_DISC
HAVING 
    COUNT(m.COD_CURSO) > 1;
    
    -- ATIVIDADE 12
    
    CREATE TABLE PARAMETROS (
    CHAVE VARCHAR(30) PRIMARY KEY, 
    DESCRICAO VARCHAR(60), 
    VALOR VARCHAR(200)
);

INSERT INTO PARAMETROS (CHAVE, DESCRICAO, VALOR) VALUES ('ANO_ATU', 'Ano atual', '2011');
INSERT INTO PARAMETROS (CHAVE, DESCRICAO, VALOR) VALUES ('SEM_ATU', 'Semestre atual', '1');
INSERT INTO PARAMETROS (CHAVE, DESCRICAO, VALOR) VALUES ('NOM_EMP', 'Nome da instituição', 'Universidade Tiradentes');
INSERT INTO PARAMETROS (CHAVE, DESCRICAO, VALOR) VALUES ('DAT_VEST', 'Data do vestibular', '03/11/2011');

-- ATIVIDADE 13
SELECT 
    a.MAT_ALU AS matricula, 
    a.NOM_ALU AS nome, 
    m.NOTA_01, 
    m.NOTA_02, 
    m.NOTA_03
FROM 
    MATRICULAS AS m
JOIN 
    ALUNOS AS a ON m.MAT_ALU = a.MAT_ALU
JOIN 
    DISCIPLINAS AS d ON m.COD_DISC = d.COD_DISC
WHERE 
    d.NOM_DISC LIKE '%BANCO DE DADOS%';

-- ATIVIDADE 14

SELECT 
    COD_DISC AS codigo_disciplina, 
    NOM_DISC AS nome_disciplina
FROM 
    DISCIPLINAS
WHERE 
    CREDITOS = 6 
    AND COD_DISC NOT IN (SELECT COD_DISC FROM HISTORICOS);
    
-- ATIVIDADE 15

SELECT 
    COD_DISC AS codigo_disciplina, 
    NOM_DISC AS nome_disciplina
FROM 
    DISCIPLINAS
WHERE 
    CREDITOS = 6 
    AND COD_DISC NOT IN (SELECT COD_DISC FROM MATRICULAS);
    
-- ATIVIDADE 16

SELECT d.COD_DISC, d.NOM_DISC
FROM DISCIPLINAS d
LEFT JOIN MATRICULAS m ON d.COD_DISC = m.COD_DISC
LEFT JOIN HISTORICOS h ON d.COD_DISC = h.COD_DISC
WHERE d.CREDITOS > 6
  AND m.COD_DISC IS NULL
  AND h.COD_DISC IS NULL;

-- ATIVIDADE 17

SELECT COUNT(*) AS total_turmas_com_vagas_ocupadas
FROM TURMAS t
JOIN MATRICULAS m ON t.ANO = m.ANO AND t.SEMESTRE = m.SEMESTRE AND t.COD_DISC = m.COD_DISC
WHERE t.ANO = 2011
  AND t.SEMESTRE = 3
  AND t.VAGAS = (SELECT COUNT(*) 
                 FROM MATRICULAS 
                 WHERE ANO = t.ANO 
                   AND SEMESTRE = t.SEMESTRE 
                   AND COD_DISC = t.COD_DISC);

-- ATIVIDADE 18

SELECT a.MAT_ALU, a.NOM_ALU, a.MGP
FROM ALUNOS a
WHERE a.MGP = (SELECT MAX(MGP) FROM ALUNOS);

-- ATIVIDADE 19

UPDATE MATRICULAS
SET NOTA_01 = 7.8, 
    NOTA_02 = 6.5, 
    NOTA_03 = 9.5, 
    FALTAS_01 = 2, 
    FALTAS_02 = 1,
    FALTAS_03 = 5 
WHERE ANO = 2011
  AND SEMESTRE = 3
  AND COD_DISC = 3855
  AND MAT_ALU = 3835;


-- ATIVIDADE 20

SELECT p.IDT_PROF, p.NOM_PROF
FROM PROFESSORES p
JOIN TURMAS t ON p.IDT_PROF = t.IDT_PROF
JOIN HISTORICOS h ON t.ANO = h.ANO AND t.SEMESTRE = h.SEMESTRE AND t.COD_DISC = h.COD_DISC
WHERE h.SITUACAO = 'Reprovado'
GROUP BY p.IDT_PROF, p.NOM_PROF
HAVING COUNT(CASE WHEN h.SITUACAO = 'Reprovado' THEN 1 END) >= 0.6 * COUNT(*);














